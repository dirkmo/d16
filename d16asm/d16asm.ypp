%{
#include "d16asm.h"

list<dwPayload> listPayload;

%}

%union {
	long l;
	char *s;
}

%token <l> TOK_NUMBER
%token <s> TOK_IDENTIFIER TOK_LITERAL TOK_LABEL
%token TOK_EOL
/* directives */
%token TOK_ORG TOK_EQU TOK_DW TOK_DS
/* keywords */
%token TOK_DROP TOK_JMP TOK_CALL TOK_RET

%start S

%%

S:
 | S line
 ;


line: TOK_EOL
    | keyword
    | TOK_NUMBER     { addNumber($1); }
    | TOK_LABEL      { addLabel($1); }
    | TOK_IDENTIFIER { addIdentifier($1); }
    | directive
    ;


keyword: TOK_DROP { addKeyword(CmdKeyword::DROP); }
       | TOK_JMP  { addKeyword(CmdKeyword::JMP); }
       | TOK_CALL { addKeyword(CmdKeyword::CALL); }
       | TOK_RET  { addKeyword(CmdKeyword::RET); }
       ;


directive: TOK_ORG TOK_NUMBER TOK_EOL { addOrg( $2 ); }
         | TOK_DS TOK_NUMBER TOK_EOL  { addDs($2); }
         | equ
         | dw
         ;


equ: TOK_EQU TOK_IDENTIFIER TOK_NUMBER TOK_EOL { addEqu( $2, $3 ); }
   ;


dw: TOK_DW dwdata { addDw(); listPayload.clear(); }
  ;


dwdata: TOK_NUMBER                  { listPayload.push_back( dwPayload($1) ); }
      | TOK_LITERAL                 { listPayload.push_back( dwPayload($1) ); }
      | TOK_IDENTIFIER              { listPayload.push_back( dwPayload($1) ); }
      | dwdata ',' TOK_NUMBER       { listPayload.push_back( dwPayload($3) ); }
      | dwdata ',' TOK_LITERAL      { listPayload.push_back( dwPayload($3) ); }
      | dwdata ',' TOK_IDENTIFIER   { listPayload.push_back( dwPayload($3) ); }
      ;

%%

void yyerror(char *s, ...) {
    va_list ap;
    va_start(ap, s);
    fprintf(stderr, "%d: error: ", yylineno);
    vfprintf(stderr, s, ap);
    fprintf(stderr, "\n");
    va_end(ap);
}
