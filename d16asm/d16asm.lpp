%option noyywrap nodefault yylineno case-insensitive

%s MACRONAME MACRO

%{
#include <cstdlib>
#include "d16asm.tab.hpp"

%}

%%

\.org               { return TOK_ORG; }
\.equ               { return TOK_EQU; }
\.dw                { return TOK_DW; }
\.ds                { return TOK_DS; }
\.macro             { BEGIN MACRONAME; }
\.endmacro          { BEGIN INITIAL; return TOK_MACROEND; }
dup                 { return TOK_DUP; }
pick                { return TOK_PICK; }
swap                { return TOK_SWAP; }
drop                { return TOK_DROP; }
jmpz                { return TOK_JMPZ; }
jmpnz               { return TOK_JMPNZ; }
jmpl                { return TOK_JMPL; }
jmp                 { return TOK_JMP; }
braz                { return TOK_BRAZ; }
branz               { return TOK_BRANZ; }
bral                { return TOK_BRAL; }
call                { return TOK_CALL; }
ret                 { return TOK_RET; }
pushrs              { return TOK_PUSHRS; }
droprs              { return TOK_DROPRS; }
poprs               { return TOK_POPRS; }
load                { return TOK_LOAD; }
store               { return TOK_STORE; }
pushpc              { return TOK_PUSHPC; }
pushsp              { return TOK_PUSHSP; }
popsp               { return TOK_POPSP; }
add                 { return TOK_ADD; }
adc                 { return TOK_ADC; }
sub                 { return TOK_SUB; }
sbc                 { return TOK_SBC; }
and                 { return TOK_AND; }
or                  { return TOK_OR; }
xor                 { return TOK_XOR; }
inv                 { return TOK_INV; }
lsl                 { return TOK_LSL; }
lsr                 { return TOK_LSR; }

<MACRONAME>[A-Z_][A-Z0-9_]+    { BEGIN MACRO; yylval.s = strdup(yytext); return TOK_MACRO; }
<MACRO>\\[1-9]      { yylval.s = strdup(yytext); return TOK_MACROARG; }
^[A-Z_][A-Z0-9_]+:  { yylval.s = strdup(yytext); return TOK_LABEL; }
[A-Z_][A-Z0-9_]+    { yylval.s = strdup(yytext); printf("ident: %s\n", yytext); return TOK_IDENTIFIER; }
[-+]?0x[0-9A-Z]+    { yylval.l = strtol(yytext, NULL, 16); printf("number: %s\n", yytext); return TOK_NUMBER; }
[-+]?[0-9]+         { yylval.l = strtol(yytext, NULL, 10); printf("number: %s\n", yytext);return TOK_NUMBER; }
[\-\+\*\/\(\),]     { return yytext[0]; }
\n                  { return TOK_EOL; }
\/\/.*
;.*\n
\".*\"              { yylval.s = strdup(yytext); return TOK_LITERAL; }
[ \t]
.                   { printf("Unknown: '%s' (%d)\n", yytext, yytext[0]); }
%%

